{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The \"Pathfinder Society Chronicle Filler\" (or short: pfscf) is a small command line application available for different platforms (Windows, macOS, Linux) that helps filling out chronicle sheets for the Pathfinder and Starfinder Roleplaying Games from Paizo Inc . You can download the program from the \"Assets\" section of the latest release . The downloaded archives should be extracted into a new directory. For details, please have a look at the installation instructions . $ pfscf The Pathfinder Society Chronicle Filler Usage: pfscf [command] Available Commands: batch Fill out multiple chronicles in one go fill Fill out a single chronicle sheet help Help about any command open Open the specified file (e.g. PDF, CSV) with its default app template Various actions on templates: list, describe, etc Flags: -h, --help help for pfscf -v, --verbose verbose output Use \"pfscf [command] --help\" for more information about a command. Quickstart If you want to dive right in, have a look at the quickstart Short Usage Overview For detailed instructions on how to use this, have a look at the Usage documentation .","title":"Overview"},{"location":"#overview","text":"The \"Pathfinder Society Chronicle Filler\" (or short: pfscf) is a small command line application available for different platforms (Windows, macOS, Linux) that helps filling out chronicle sheets for the Pathfinder and Starfinder Roleplaying Games from Paizo Inc . You can download the program from the \"Assets\" section of the latest release . The downloaded archives should be extracted into a new directory. For details, please have a look at the installation instructions . $ pfscf The Pathfinder Society Chronicle Filler Usage: pfscf [command] Available Commands: batch Fill out multiple chronicles in one go fill Fill out a single chronicle sheet help Help about any command open Open the specified file (e.g. PDF, CSV) with its default app template Various actions on templates: list, describe, etc Flags: -h, --help help for pfscf -v, --verbose verbose output Use \"pfscf [command] --help\" for more information about a command.","title":"Overview"},{"location":"#quickstart","text":"If you want to dive right in, have a look at the quickstart","title":"Quickstart"},{"location":"#short-usage-overview","text":"For detailed instructions on how to use this, have a look at the Usage documentation .","title":"Short Usage Overview"},{"location":"extraction/","text":"Getting Blank Chronicle Sheets To fill out chronicle sheets using pfscf , you need to have a blank/empty chronicle as PDF file with only a single page. Blank chronicle sheets are normally included at the end of each Pathfinder/Starfinder society scenario. An exception to this are chronicles for adventure paths ( example ) and specials ( example ). In such cases download links for the associated chronicles are normally directly included on the associated product page on Paizos homepage. The easiest way to get an empty chronicle sheet out of a scenario to use with pfscf is to open the scenario in a PDF viewer and then print the chronicle page to a file using a so-called PDF printer. This would create a new PDF file as output. The problem is that, depending on the concrete printer settings/options, the documents may slightly differ. The content may look ok, but there might be small margins at the borders of the page or the like. Now as pfscf needs accurate positions, even such small differences may result in a chronicle that looks slightly off when filled. Therefore, please find below some guidance on how to extract chronicle sheets in a way that worked for me. Windows Acrobat Reader Open scenario PDF using the Acrobat Reader Switch to last page that contains the chronicle Open print dialog Select printer \"Microsoft Print to PDF\" Select \"Print pages: Current\" Select \"Fit\". Do NOT select \"Actual Size\". Yes, this is counter-intuitive, I know. Print MacOS Preview Open adventure PDF using Preview.app Make a duplicate using \"File\" > \"Duplicate\" Enter an appropriate name for the new file Open the thumbnail view in the sidebar, either using the sidebar button in the toolbar, or via \"View\" > \"Thumbnails\" You can now simply delete pages one at a time by selecting their thumbnails and hitting delete. For most adventures, however, it will be faster to: Click in the thumbnail area Hit \u2318+A to select all Scroll to the last page \u2318+Click the last page to deselect it Hit delete to delete everything else Then simply save the new PDF Linux To be done, thankful for tipps.","title":"Getting Blank Chronicle Sheets"},{"location":"extraction/#getting-blank-chronicle-sheets","text":"To fill out chronicle sheets using pfscf , you need to have a blank/empty chronicle as PDF file with only a single page. Blank chronicle sheets are normally included at the end of each Pathfinder/Starfinder society scenario. An exception to this are chronicles for adventure paths ( example ) and specials ( example ). In such cases download links for the associated chronicles are normally directly included on the associated product page on Paizos homepage. The easiest way to get an empty chronicle sheet out of a scenario to use with pfscf is to open the scenario in a PDF viewer and then print the chronicle page to a file using a so-called PDF printer. This would create a new PDF file as output. The problem is that, depending on the concrete printer settings/options, the documents may slightly differ. The content may look ok, but there might be small margins at the borders of the page or the like. Now as pfscf needs accurate positions, even such small differences may result in a chronicle that looks slightly off when filled. Therefore, please find below some guidance on how to extract chronicle sheets in a way that worked for me.","title":"Getting Blank Chronicle Sheets"},{"location":"extraction/#windows","text":"","title":"Windows"},{"location":"extraction/#acrobat-reader","text":"Open scenario PDF using the Acrobat Reader Switch to last page that contains the chronicle Open print dialog Select printer \"Microsoft Print to PDF\" Select \"Print pages: Current\" Select \"Fit\". Do NOT select \"Actual Size\". Yes, this is counter-intuitive, I know. Print","title":"Acrobat Reader"},{"location":"extraction/#macos","text":"","title":"MacOS"},{"location":"extraction/#preview","text":"Open adventure PDF using Preview.app Make a duplicate using \"File\" > \"Duplicate\" Enter an appropriate name for the new file Open the thumbnail view in the sidebar, either using the sidebar button in the toolbar, or via \"View\" > \"Thumbnails\" You can now simply delete pages one at a time by selecting their thumbnails and hitting delete. For most adventures, however, it will be faster to: Click in the thumbnail area Hit \u2318+A to select all Scroll to the last page \u2318+Click the last page to deselect it Hit delete to delete everything else Then simply save the new PDF","title":"Preview"},{"location":"extraction/#linux","text":"To be done, thankful for tipps.","title":"Linux"},{"location":"faq/","text":"Frequently Asked Questions This is the section about general questions. In case you are having problems with using the program, please have a look at the troubleshooting chapter What types of chronicles / game systems are supported at the moment? At the moment the chronicles for Pathfinder 2 and Starfinder are supported. Pathfinder 1 is in general also possible, but I did not yet have time to provide the proper configuration. Also Pathfinder 1 may take some more time, as Paizo seems to have changed the chronicle layout between seaons. What about scenario-specific options? For example, I have this one scenario where I need an easy way to strike out boons that the group did not get. The program already supports in general to have scenario-specific options, and there are already templates for some scenarios. However, neither do I own all Society scenarios nor do I have enough time to provide the config for multiple dozens of scenarios that I own. But... contributions are welcome! No programming skills are required for providing a scenario-specific config. Just a text editor and some time to fiddle out the coordinates for all the relevant parts. And what do I also have on the roadmap? An auto-updater for such configs! So if people would contribute scenario-specific configs, then other people don't need to update their installation of pfscf every two weeks, but just call the program with some yet-to-be-determined parameter (think of pfscf update-config ) and you get the latest and greatest scenario-specific config automatically downloaded to your computer. I have this absolutely great idea for a missing feature! Can you implement this? Yay! Feature ideas are always welcome! Please open an issue in this repository and describe your idea! The more details, the better! But please be also aware that I am doing this in my free time, and some things might be really, really complicated to realize. So please don't be mad if things might take a little bit longer or sometimes even won't be done. But... it's open source, contributions are always possible and welcome :) Still: If you have an idea that you think would improve this project, please create an issue here. You'll never know unless you tried! Why don't you also provide the blank chronicles? Should probably be clear, but let's have that question anyways. The answer is: Copyright. I do not own the blank chronicles and don't have permission from Paizo to include them here. I also won't take up any discussions with Paizo regarding this. If you want to fill out chronicles, you should have the scenario PDF anyways. Will there ever be a GUI for pfscf? Quite unlikely, at least not by me. I suck at GUIs and am also not that interested in having one for pfscf (although I also see the advantages). But if you're interested in making one and using pfscf in the background, then I'm sure that lots of people will love it! Honestly! It's just not something for me, sorry. Can you provide this program also for additional operating systems? I can in general provide prebuild binaries for all operating systems and platforms that are supported by Golang . This includes especially intel 32bit, arm, and PowerPC. So if you think there is a need for this, please drop me a message. (PS: Android is also supported by golang, but as this is a command-line tool I currently do not see the point of providing an Android build.) Why golang? It produces standalone executables for all major platforms (Windows, macOS, Linux) and users do not have to install any additional software to use pfscf. Also I wanted to give golang a try anyways (first go project for me), and then it's always good to have something that you plan to use yourself.","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"This is the section about general questions. In case you are having problems with using the program, please have a look at the troubleshooting chapter What types of chronicles / game systems are supported at the moment? At the moment the chronicles for Pathfinder 2 and Starfinder are supported. Pathfinder 1 is in general also possible, but I did not yet have time to provide the proper configuration. Also Pathfinder 1 may take some more time, as Paizo seems to have changed the chronicle layout between seaons. What about scenario-specific options? For example, I have this one scenario where I need an easy way to strike out boons that the group did not get. The program already supports in general to have scenario-specific options, and there are already templates for some scenarios. However, neither do I own all Society scenarios nor do I have enough time to provide the config for multiple dozens of scenarios that I own. But... contributions are welcome! No programming skills are required for providing a scenario-specific config. Just a text editor and some time to fiddle out the coordinates for all the relevant parts. And what do I also have on the roadmap? An auto-updater for such configs! So if people would contribute scenario-specific configs, then other people don't need to update their installation of pfscf every two weeks, but just call the program with some yet-to-be-determined parameter (think of pfscf update-config ) and you get the latest and greatest scenario-specific config automatically downloaded to your computer. I have this absolutely great idea for a missing feature! Can you implement this? Yay! Feature ideas are always welcome! Please open an issue in this repository and describe your idea! The more details, the better! But please be also aware that I am doing this in my free time, and some things might be really, really complicated to realize. So please don't be mad if things might take a little bit longer or sometimes even won't be done. But... it's open source, contributions are always possible and welcome :) Still: If you have an idea that you think would improve this project, please create an issue here. You'll never know unless you tried! Why don't you also provide the blank chronicles? Should probably be clear, but let's have that question anyways. The answer is: Copyright. I do not own the blank chronicles and don't have permission from Paizo to include them here. I also won't take up any discussions with Paizo regarding this. If you want to fill out chronicles, you should have the scenario PDF anyways. Will there ever be a GUI for pfscf? Quite unlikely, at least not by me. I suck at GUIs and am also not that interested in having one for pfscf (although I also see the advantages). But if you're interested in making one and using pfscf in the background, then I'm sure that lots of people will love it! Honestly! It's just not something for me, sorry. Can you provide this program also for additional operating systems? I can in general provide prebuild binaries for all operating systems and platforms that are supported by Golang . This includes especially intel 32bit, arm, and PowerPC. So if you think there is a need for this, please drop me a message. (PS: Android is also supported by golang, but as this is a command-line tool I currently do not see the point of providing an Android build.) Why golang? It produces standalone executables for all major platforms (Windows, macOS, Linux) and users do not have to install any additional software to use pfscf. Also I wanted to give golang a try anyways (first go project for me), and then it's always good to have something that you plan to use yourself.","title":"Frequently Asked Questions"},{"location":"installation/","text":"Installation & Updates Installation You can download the latest release from the \"Assets\" section of the latest release . Currently there are zipped packages for Windows, macOS/Darwin and Linux. Download the release for your currently used operating system and extract into a new folder. The important things in this directory are the pfscf executable and the templates directory. The executable is, of course, the program to run this whole thing, whereas the templates directory contains the configuration files for the chronicle sheets, so that the program knows what to print where on the resulting sheet. The program itself is a command line application. This means that e.g. on Windows you have to use the Windows command prompt or the Windows PowerShell to run this. You should also find a file openCmdHere.bat in the installation directory that will on windows open a cmd prompt window in the directory where the program is installed. Updates At the moment I would propose to simply delete the directory that contains the old version of the program and follow the installation instructions again.","title":"Installation & Updates"},{"location":"installation/#installation-updates","text":"","title":"Installation &amp; Updates"},{"location":"installation/#installation","text":"You can download the latest release from the \"Assets\" section of the latest release . Currently there are zipped packages for Windows, macOS/Darwin and Linux. Download the release for your currently used operating system and extract into a new folder. The important things in this directory are the pfscf executable and the templates directory. The executable is, of course, the program to run this whole thing, whereas the templates directory contains the configuration files for the chronicle sheets, so that the program knows what to print where on the resulting sheet. The program itself is a command line application. This means that e.g. on Windows you have to use the Windows command prompt or the Windows PowerShell to run this. You should also find a file openCmdHere.bat in the installation directory that will on windows open a cmd prompt window in the directory where the program is installed.","title":"Installation"},{"location":"installation/#updates","text":"At the moment I would propose to simply delete the directory that contains the old version of the program and follow the installation instructions again.","title":"Updates"},{"location":"legal/","text":"Legal disclaimer Pathfinder, the Pathfinder logo, the Pathfinder Society, Starfinder, the Starfinder Society and the Starfinder logo are registered trademarks of Paizo Inc . This program and website is not published, endorsed, or specifically approved by Paizo. The RPG games from Paizo listed above use the Open Gaming License and are pretty cool. Support their games! This program is being developed as private hobby. Although this program is intended to be used with chronicles for organized play from Paizo, I am in no way associated with Paizo Inc. Also, you're using this program at your own risk. I won't take any responsibility or liability for any direct or indirect damage, data loss, data corruption and the like done by using this program. I cannot guarantee that the program is free of bugs (on the contrary, I am pretty sure that there is a sufficient number of bugs still included), and if I am made aware of a problem, I won't guarantee on a timeline until when that bug will be fixed.","title":"Legal disclaimer"},{"location":"legal/#legal-disclaimer","text":"Pathfinder, the Pathfinder logo, the Pathfinder Society, Starfinder, the Starfinder Society and the Starfinder logo are registered trademarks of Paizo Inc . This program and website is not published, endorsed, or specifically approved by Paizo. The RPG games from Paizo listed above use the Open Gaming License and are pretty cool. Support their games! This program is being developed as private hobby. Although this program is intended to be used with chronicles for organized play from Paizo, I am in no way associated with Paizo Inc. Also, you're using this program at your own risk. I won't take any responsibility or liability for any direct or indirect damage, data loss, data corruption and the like done by using this program. I cannot guarantee that the program is free of bugs (on the contrary, I am pretty sure that there is a sufficient number of bugs still included), and if I am made aware of a problem, I won't guarantee on a timeline until when that bug will be fixed.","title":"Legal disclaimer"},{"location":"quickstart/","text":"Quickstart This chapter presents quickstart instructions for filling out multiple chronicle sheets for a complete game group. You should have the scenario as PDF file at hand. Quickstart Download the program and extract into a new folder. For details see the installation instructions . Get a blank society chronicle as single-paged PDF file. I'd suggest to follow these instructions . Put the resulting PDF page in the same directory to which you extracted pfscf . Open a command line prompt / terminal in this directory. On windows this can be done by double-clicking the openCmdHere.bat file included in the installation folder. Check whether the scenario from your chronicle is already explicitly supported. Call pfscf template list to get a complete list of all supported scenarios, or use pfscf template search <part of scenario title> to search for it. Write down the ID from the beginning of the line, e.g. something like pfs2.s1-06 for PFS2 scenario \"#1-06: Lost on the Spirit Road\". Create a CSV file for your scenario where you collect all the required information about the players and the event. Do this by calling pfscf batch create <filename> -t <id from step 4> . This could look something like pfscf batch create session.csv -t pfs2.s1-06 . If you have a program like Excel or LibreOffice installed on your PC, then chances are good that this will now automatically open up and present the contents of the CSV file. If not, you have to open the CSV file manually, either with one of the named programs or with a text editor like Notepad++ . Fill in the values for each player and then save the file. Finally create the chronicle files by calling pfscf batch fill <csv file from step 6> -i <blank chronicle from step 2> -o <output directory> . For our example, this could look like the following: pfscf batch fill session.csv -i blank-s1-06.pdf -o outputDir . This should now create a single PDF file per player in the listed dir. If the specified directory does not yet exist, pfscf will try to create it. Basic Troubleshooting If something does not work as described above, please check whether you followed the exact instructions. If chronicle files were created, but all the printed values seem to be slightly off, please try to create a new blank chronicle with the instructions from this chapter . Check whether the troubleshooting chapter provides additional help.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This chapter presents quickstart instructions for filling out multiple chronicle sheets for a complete game group. You should have the scenario as PDF file at hand.","title":"Quickstart"},{"location":"quickstart/#quickstart_1","text":"Download the program and extract into a new folder. For details see the installation instructions . Get a blank society chronicle as single-paged PDF file. I'd suggest to follow these instructions . Put the resulting PDF page in the same directory to which you extracted pfscf . Open a command line prompt / terminal in this directory. On windows this can be done by double-clicking the openCmdHere.bat file included in the installation folder. Check whether the scenario from your chronicle is already explicitly supported. Call pfscf template list to get a complete list of all supported scenarios, or use pfscf template search <part of scenario title> to search for it. Write down the ID from the beginning of the line, e.g. something like pfs2.s1-06 for PFS2 scenario \"#1-06: Lost on the Spirit Road\". Create a CSV file for your scenario where you collect all the required information about the players and the event. Do this by calling pfscf batch create <filename> -t <id from step 4> . This could look something like pfscf batch create session.csv -t pfs2.s1-06 . If you have a program like Excel or LibreOffice installed on your PC, then chances are good that this will now automatically open up and present the contents of the CSV file. If not, you have to open the CSV file manually, either with one of the named programs or with a text editor like Notepad++ . Fill in the values for each player and then save the file. Finally create the chronicle files by calling pfscf batch fill <csv file from step 6> -i <blank chronicle from step 2> -o <output directory> . For our example, this could look like the following: pfscf batch fill session.csv -i blank-s1-06.pdf -o outputDir . This should now create a single PDF file per player in the listed dir. If the specified directory does not yet exist, pfscf will try to create it.","title":"Quickstart"},{"location":"quickstart/#basic-troubleshooting","text":"If something does not work as described above, please check whether you followed the exact instructions. If chronicle files were created, but all the printed values seem to be slightly off, please try to create a new blank chronicle with the instructions from this chapter . Check whether the troubleshooting chapter provides additional help.","title":"Basic Troubleshooting"},{"location":"templates/","text":"Creating Template Files for Pfscf (Outdated) Outdated The contents of this page are quite outdated. I will see that I update this page in the near future. Format bound to change This is still quite a new project. And already the file format for the chronicle templates has changed various times. Most likely this will happen again in the near future, multiple times. So please keep that in mind when writing new files: They will most likely need to be updated again soon. After some time of using pfscf, you might be tempted to create your own templates or modify existing ones. Or you are just curious on what is currently supported by pfscf. Besides, it's always useful to provide proper documentation. Even if perhaps only for the reason to show that the weird behavior for something might be actually intended! Template Structure on Disk The template files are stored in a folder templates that is located in the same folder as the pfscf executable file. Within this folder, each template is stored in a single file with file extension .yml . It is also possible to create subfolder within the templates folder to organize the template files. For example, this could be used to have separate folders for each supported game system, e.g. one folder for Pathfinder, one for Starfinder. The filenames of the template files are irrelevant. They should provide a hint to what is included, but besides from that they are not used anywhere. This especially means that they are not used for the unique identifier which each template must have; this is done by the id field within the template file. See also the Template file format section below on this. Template File Format YAML Format Template files are stored in YAML format, one template per file. The official spec of this format is maintained at yaml.org , and if you search the web you will find lots of examples, introductions and explanations to the format. In this document, however, I will try to spare you the irrelevant parts and only include a very basic overview over what you might need. A YAML file is a plain text file and can be opened with any text editor, if need be with the Windows Notepad application. What is not possible is to use MS Word, LibreOffice and the like to modify such files. Many modern text editors even bringt support for writing/modifying YAML files. One such editor that I can recommend is Notepad++ (not to be mixed up with the already mentioned MS Notepad). YAML is intended to be a human-readable format. Most lines in these files follow the format <some identifier>: <some value> , e.g. description: This is a template for PFS . And until I have more time to write a proper YAML introduction, I would suggest you take a look at the existing files in the templates folder or search the web. File Layout Template files have the following structure: id : <unique template identifier> description : <short description on what this template contains> inherit : <id of template that should be inherited> presets : <presetId> : <content> <presetId> : <content> ... content : <contentId> : <content> <contentId> : <content> ... Example id : myId description : This is an example template inherit : idOfMyOtherCoolTemplate presets : topline : y : 10 y2 : 20 bottomline : y : 40 y2 : 50 content : name : type : textCell presets : [ topline ] x : 5 x2 : 15 date : type : textCell presets : [ bottomline ] x : 20 x2 : 23 The only mandatory top-level fields in such a template are the id and the description , all other top-level fields ( inherit , presets , content ) in this basic structure are optional. Of course, a template that only consists of an id and a description does not make much sense. But who am I to judge? Each entry below content and presets must have an ID that is unique within that section. That means, no two entries in the content section may have the same ID, and no two entries in the presets section may have the same ID. The description on what may be included in a content or presets entry is described below. Content Types The pfsct app supports different types of content entries. Each content entry requires a mandatory field type where the type of the content entry must be added. Generic Content Entry Structure A content entry has a specific structure and set of fields. The different types listed below use only a subset of these fields. The available fields are as follows: Field Description Input type type The name of the type of this content entry. The currently supported types are described below Text desc Short description of what this content entry is or does Text x First coordinate on the X axis for the current content Number y First coordinate on the Y axis for the current content Number x2 Second coordinate on the X axis for the current content Number y2 Second coordinate on the Y axis for the current content Number xpivot Pivot point on the X axis for the current content Number font Name of the font to use. See the list of supported fonts Text fontsize Fontsize in points Number align Text alignment inside the rectangle. See the list of supported alignments . Text example An example input value for the current content Text presets A list of preset IDs to apply to this content entry. See the section about presets List Type textCell A textCell describes a rectangular cell on the PDF file where user-provided text is added. It has a couple of mandatory and some optional fields. All fields that are not listed in the table below are currently not used and simply ignored. Field Required? Comment desc Optional x , y Mandatory Set of coordinates for one of the cell corners x2 , y2 Mandatory Set of coordinates for the cell corner opposite of the first corner font Mandatory fontsize Mandatory align Mandatory . example Optional presets Optional Regarding the coordinates: It does not matter whether x is smaller than x2 or vice versa. Same goes for y and y2 . TextCell Example playername : type : textCell desc : Player name x : 40 y : 75 x2 : 60 y2 : 80 font : Helvetica fontsize : 14 align : CB example : Bob Type societyId A societyId is a special type of content whose sole purpose is to bring a society ID to a chronicle with some special formatting. A society ID should follow the pattern <player_id>-<char_id> , e.g. 123456-789. So why not simply use one or multiple textCell entries for this? Well, the societyId does a little bit more than that. One special thing is that it blanks out (some of) the background underneath it. For PFS2, there is already the \"- 2\" part of the society ID preprinted on the chronicles. I can understand the motivation behind that, but for the automatically filled out chronicles I want to have everything using the same font and size. Second reason for an own content type is the positioning. With a text cell you always have to make assumptions on where exactly to put the text. Should it be left-aligned? But what if the player id is longer for some players as it has more digits? Long story short: The societyId type takes one extra parameter xpivot that basically says on where exactly the dash should be located on the x axis. Left of that we have the player id, right of that we have the char id. This content type has a couple of mandatory and some optional fields. All fields that are not listed in the table below are currently not used and simply ignored. Field Required? Comment desc Optional x , y Mandatory Set of coordinates for one of the cell corners x2 , y2 Mandatory Set of coordinates for the cell corner opposite of the first corner xpivot Mandatory Location of the (center of the) dash on the x axis. Must lie between x and x2 font Mandatory fontsize Mandatory example Optional presets Optional SocietyId Example societyid : type : societyId desc : The players society id x : 40 y : 75 xpivot : 52 x2 : 60 y2 : 80 font : Helvetica fontsize : 14 example : 123456-789 Presets Mechanism Presets are a way to reuse things like coordinates that appear in multiple content entries. For example, you might want to use the same font everywhere. You can either write down the same font in each and every content entry. Or you create a preset that contains the font name and use that in all entries. Another useful example is if you have multiple content entries that should appear on the same line in the final PDF, i.e. they are using the same coordinates for the Y axis, and don't want to repeat the coordinates in each entry here. You can then manage, e.g. the Y coordinates in a single preset that is used by all entries on the same line. Presets are structured in a more or less similar way as \"regular\" content entries, i.e. the list of supported fields is a subset of what is presented in section Generic Content Entry Structure . Presets can be used by content entries or by other presets. To use a preset, it has to be listed in the presets section of a content entry or another preset entry. content : name : [ ... ] presets : [ topline ] Presets Example Example structure: presets : defaultfont : font : Helvetica fontsize : 14 topline : y : 10 y2 : 12 presets : [ defaultfont ] contents : name : type : textCell x : 20 x2 : 27.5 presets : [ topline ] Resulting content: contents : name : type : textCell x : 20 y : 10 # from preset 'topline' x2 : 27.5 y2 : 12 # from preset 'topline' font : Helvetica # from template 'defaultfont', indirectly inherited via 'topline' fontsize : 14 # from template 'defaultfont', indirectly inherited via 'topline' It is possible to use multiple presets at the same time. content : name : [ ... ] presets : [ topline , boldfont ] But this will only work as long as the presets are \"compatible\" to each other, i.e. as long as they do not contain any conflicting information. So it is not possible to use two presets in the same content entry where one of them says that, e.g., the y2 coordinate has a value of 100, and the other presets states that y2 should be 105. Presets Conflict Example Example structure: presets : presetX : x : 50 presetCoords_1 : y : 10 presets : [ presetX ] presetCoords_2 : y : 12 presets : [ presetX ] contents : someEntry_1 : type : textCell x : 10 presets : [ presetCoords_1 ] # Only one preset used; original 'x' takes precedence, everything ok someEntry_2 : type : textCell presets : [ presetCoords_1 , presetCoords_2 ] # Conflict! Both presets have different values for 'x' Template Inheritance Templates can inherit other templates. This means that all the content and presets from the original template will also be available in the new template. The inheritance mechanism works tranistively. So if template A inherits from template B, and template B inherits from template C, then all presets and content from both templates B and C will be available in template A. In case of conflicting IDs, i.e. when an ID for a preset or content entry appears in both template, the entry from the inheriting template takes precedence. Presets are only resolved after everything was inherited. This means you can also change the appearance of inherited content by replacing presets that are used by this inherited content. Inheritance Example File 1 (will be inherited by file 2 below): id : foo presets : defaultfont : font : Helvetica fontsize : 14 topline : y : 10 y2 : 20 presets : [ defaultfont ] content : charname : type : textCell x : 10 x2 : 20 presets : [ topline ] xp : type : textCell x : 30 y : 30 File 2 (inherits file 1 from above): id : foobar inherit : foo presets : defaultfont : font : Arial fontsize : 10 content : playername : type : textCell x : 30 x2 : 40 presets : [ topline ] xp : type : textCell x : 45 y : 45 Result after inheritance was resolved: id : foobar presets : defaultfont : # <= this comes from file 2 font : Arial fontsize : 10 topline : # <= this comes from file 1 y : 10 y2 : 20 presets : [ defaultfont ] content : charname : # <= this comes from file 1 type : textCell x : 10 x2 : 20 presets : [ topline ] playername : # <= this comes from file 2 type : textCell x : 30 x2 : 40 presets : [ topline ] xp : # <= this comes from file 2 x : 45 y : 45 Finding the Correct Coordinates Let's be honest from the beginning: Finding the correct coordinates for adding own content is always fiddly and a lot of try-and-error. However, there are a few ways to make life easier here. There are currently three options for the pfscf fill command to support finding the correct coordinates: --cellBorder (short: -c ) --exampleValues (short: -e ) --grid (short: -g ) The grid option is probably the most useful. It will draw a grid over the chronicle PDF file and print the x/y coordinates at the borders of the page. The grid consists of major lines every 5 percent and minor lines every percent. This should allow to get at least the rough coordinates for whatever you want to add, although normally some fine-tuning is required afterwards. Next is the cellBorder option. When this is selected, pfscf will draw borders around the cells that it is printing on the page. This allows to see the exact boundaries and locations of what you provided via coordinates. At the moment, this is only done for content that is actually printed to the page. So if you have some new content, but do not print it on the page, there won't be any borders displayed as well. And finally the exampleValues option. If you select this, normal input values like, e.g. player=Bob will be ignored. Instead, every content that has an example value provided will be printed to the chronicle using exactly this value. So from experience I would suggest to start with the grid option, get rough initial coordinates, and then switch to using both the cellBorder option and the exampleValues option to fine-tune everything. Other Formatting Options Text Alignment Some content types, e.g. textCell , allow to choose an alignment. This normally consists of a horizontal and a vertical alignment. For example, selecting an alignment of RT for a textCell would indicate that the text should be aligned in the top right corner of the cell. The possible values for horizontal and vertical alignment can be found below. If you choose more than one horizontal or vertical alignment, no error will be thrown yet, but only one of the chosen alignments will be used. The order of the alignment values does not matter, e.g. both RT and TR will have the same result. Horizontal Alignment L : Left-bound C : Centered R : Right-bound Vertical Alignment T : Top M : Middle B : Bottom A : Baseline Fonts The list of fonts that can currently be used is as follows: Arial Courier Helvetica Times Symbol ZapfDingbats Support for other fonts will probably never come. What might come later is support for formatting options like bold, italics, underscores.","title":"Creating Template Files for Pfscf (Outdated)"},{"location":"templates/#creating-template-files-for-pfscf-outdated","text":"Outdated The contents of this page are quite outdated. I will see that I update this page in the near future. Format bound to change This is still quite a new project. And already the file format for the chronicle templates has changed various times. Most likely this will happen again in the near future, multiple times. So please keep that in mind when writing new files: They will most likely need to be updated again soon. After some time of using pfscf, you might be tempted to create your own templates or modify existing ones. Or you are just curious on what is currently supported by pfscf. Besides, it's always useful to provide proper documentation. Even if perhaps only for the reason to show that the weird behavior for something might be actually intended!","title":"Creating Template Files for Pfscf (Outdated)"},{"location":"templates/#template-structure-on-disk","text":"The template files are stored in a folder templates that is located in the same folder as the pfscf executable file. Within this folder, each template is stored in a single file with file extension .yml . It is also possible to create subfolder within the templates folder to organize the template files. For example, this could be used to have separate folders for each supported game system, e.g. one folder for Pathfinder, one for Starfinder. The filenames of the template files are irrelevant. They should provide a hint to what is included, but besides from that they are not used anywhere. This especially means that they are not used for the unique identifier which each template must have; this is done by the id field within the template file. See also the Template file format section below on this.","title":"Template Structure on Disk"},{"location":"templates/#template-file-format","text":"","title":"Template File Format"},{"location":"templates/#yaml-format","text":"Template files are stored in YAML format, one template per file. The official spec of this format is maintained at yaml.org , and if you search the web you will find lots of examples, introductions and explanations to the format. In this document, however, I will try to spare you the irrelevant parts and only include a very basic overview over what you might need. A YAML file is a plain text file and can be opened with any text editor, if need be with the Windows Notepad application. What is not possible is to use MS Word, LibreOffice and the like to modify such files. Many modern text editors even bringt support for writing/modifying YAML files. One such editor that I can recommend is Notepad++ (not to be mixed up with the already mentioned MS Notepad). YAML is intended to be a human-readable format. Most lines in these files follow the format <some identifier>: <some value> , e.g. description: This is a template for PFS . And until I have more time to write a proper YAML introduction, I would suggest you take a look at the existing files in the templates folder or search the web.","title":"YAML Format"},{"location":"templates/#file-layout","text":"Template files have the following structure: id : <unique template identifier> description : <short description on what this template contains> inherit : <id of template that should be inherited> presets : <presetId> : <content> <presetId> : <content> ... content : <contentId> : <content> <contentId> : <content> ... Example id : myId description : This is an example template inherit : idOfMyOtherCoolTemplate presets : topline : y : 10 y2 : 20 bottomline : y : 40 y2 : 50 content : name : type : textCell presets : [ topline ] x : 5 x2 : 15 date : type : textCell presets : [ bottomline ] x : 20 x2 : 23 The only mandatory top-level fields in such a template are the id and the description , all other top-level fields ( inherit , presets , content ) in this basic structure are optional. Of course, a template that only consists of an id and a description does not make much sense. But who am I to judge? Each entry below content and presets must have an ID that is unique within that section. That means, no two entries in the content section may have the same ID, and no two entries in the presets section may have the same ID. The description on what may be included in a content or presets entry is described below.","title":"File Layout"},{"location":"templates/#content-types","text":"The pfsct app supports different types of content entries. Each content entry requires a mandatory field type where the type of the content entry must be added.","title":"Content Types"},{"location":"templates/#generic-content-entry-structure","text":"A content entry has a specific structure and set of fields. The different types listed below use only a subset of these fields. The available fields are as follows: Field Description Input type type The name of the type of this content entry. The currently supported types are described below Text desc Short description of what this content entry is or does Text x First coordinate on the X axis for the current content Number y First coordinate on the Y axis for the current content Number x2 Second coordinate on the X axis for the current content Number y2 Second coordinate on the Y axis for the current content Number xpivot Pivot point on the X axis for the current content Number font Name of the font to use. See the list of supported fonts Text fontsize Fontsize in points Number align Text alignment inside the rectangle. See the list of supported alignments . Text example An example input value for the current content Text presets A list of preset IDs to apply to this content entry. See the section about presets List","title":"Generic Content Entry Structure"},{"location":"templates/#type-textcell","text":"A textCell describes a rectangular cell on the PDF file where user-provided text is added. It has a couple of mandatory and some optional fields. All fields that are not listed in the table below are currently not used and simply ignored. Field Required? Comment desc Optional x , y Mandatory Set of coordinates for one of the cell corners x2 , y2 Mandatory Set of coordinates for the cell corner opposite of the first corner font Mandatory fontsize Mandatory align Mandatory . example Optional presets Optional Regarding the coordinates: It does not matter whether x is smaller than x2 or vice versa. Same goes for y and y2 . TextCell Example playername : type : textCell desc : Player name x : 40 y : 75 x2 : 60 y2 : 80 font : Helvetica fontsize : 14 align : CB example : Bob","title":"Type textCell"},{"location":"templates/#type-societyid","text":"A societyId is a special type of content whose sole purpose is to bring a society ID to a chronicle with some special formatting. A society ID should follow the pattern <player_id>-<char_id> , e.g. 123456-789. So why not simply use one or multiple textCell entries for this? Well, the societyId does a little bit more than that. One special thing is that it blanks out (some of) the background underneath it. For PFS2, there is already the \"- 2\" part of the society ID preprinted on the chronicles. I can understand the motivation behind that, but for the automatically filled out chronicles I want to have everything using the same font and size. Second reason for an own content type is the positioning. With a text cell you always have to make assumptions on where exactly to put the text. Should it be left-aligned? But what if the player id is longer for some players as it has more digits? Long story short: The societyId type takes one extra parameter xpivot that basically says on where exactly the dash should be located on the x axis. Left of that we have the player id, right of that we have the char id. This content type has a couple of mandatory and some optional fields. All fields that are not listed in the table below are currently not used and simply ignored. Field Required? Comment desc Optional x , y Mandatory Set of coordinates for one of the cell corners x2 , y2 Mandatory Set of coordinates for the cell corner opposite of the first corner xpivot Mandatory Location of the (center of the) dash on the x axis. Must lie between x and x2 font Mandatory fontsize Mandatory example Optional presets Optional SocietyId Example societyid : type : societyId desc : The players society id x : 40 y : 75 xpivot : 52 x2 : 60 y2 : 80 font : Helvetica fontsize : 14 example : 123456-789","title":"Type societyId"},{"location":"templates/#presets-mechanism","text":"Presets are a way to reuse things like coordinates that appear in multiple content entries. For example, you might want to use the same font everywhere. You can either write down the same font in each and every content entry. Or you create a preset that contains the font name and use that in all entries. Another useful example is if you have multiple content entries that should appear on the same line in the final PDF, i.e. they are using the same coordinates for the Y axis, and don't want to repeat the coordinates in each entry here. You can then manage, e.g. the Y coordinates in a single preset that is used by all entries on the same line. Presets are structured in a more or less similar way as \"regular\" content entries, i.e. the list of supported fields is a subset of what is presented in section Generic Content Entry Structure . Presets can be used by content entries or by other presets. To use a preset, it has to be listed in the presets section of a content entry or another preset entry. content : name : [ ... ] presets : [ topline ] Presets Example Example structure: presets : defaultfont : font : Helvetica fontsize : 14 topline : y : 10 y2 : 12 presets : [ defaultfont ] contents : name : type : textCell x : 20 x2 : 27.5 presets : [ topline ] Resulting content: contents : name : type : textCell x : 20 y : 10 # from preset 'topline' x2 : 27.5 y2 : 12 # from preset 'topline' font : Helvetica # from template 'defaultfont', indirectly inherited via 'topline' fontsize : 14 # from template 'defaultfont', indirectly inherited via 'topline' It is possible to use multiple presets at the same time. content : name : [ ... ] presets : [ topline , boldfont ] But this will only work as long as the presets are \"compatible\" to each other, i.e. as long as they do not contain any conflicting information. So it is not possible to use two presets in the same content entry where one of them says that, e.g., the y2 coordinate has a value of 100, and the other presets states that y2 should be 105. Presets Conflict Example Example structure: presets : presetX : x : 50 presetCoords_1 : y : 10 presets : [ presetX ] presetCoords_2 : y : 12 presets : [ presetX ] contents : someEntry_1 : type : textCell x : 10 presets : [ presetCoords_1 ] # Only one preset used; original 'x' takes precedence, everything ok someEntry_2 : type : textCell presets : [ presetCoords_1 , presetCoords_2 ] # Conflict! Both presets have different values for 'x'","title":"Presets Mechanism"},{"location":"templates/#template-inheritance","text":"Templates can inherit other templates. This means that all the content and presets from the original template will also be available in the new template. The inheritance mechanism works tranistively. So if template A inherits from template B, and template B inherits from template C, then all presets and content from both templates B and C will be available in template A. In case of conflicting IDs, i.e. when an ID for a preset or content entry appears in both template, the entry from the inheriting template takes precedence. Presets are only resolved after everything was inherited. This means you can also change the appearance of inherited content by replacing presets that are used by this inherited content. Inheritance Example File 1 (will be inherited by file 2 below): id : foo presets : defaultfont : font : Helvetica fontsize : 14 topline : y : 10 y2 : 20 presets : [ defaultfont ] content : charname : type : textCell x : 10 x2 : 20 presets : [ topline ] xp : type : textCell x : 30 y : 30 File 2 (inherits file 1 from above): id : foobar inherit : foo presets : defaultfont : font : Arial fontsize : 10 content : playername : type : textCell x : 30 x2 : 40 presets : [ topline ] xp : type : textCell x : 45 y : 45 Result after inheritance was resolved: id : foobar presets : defaultfont : # <= this comes from file 2 font : Arial fontsize : 10 topline : # <= this comes from file 1 y : 10 y2 : 20 presets : [ defaultfont ] content : charname : # <= this comes from file 1 type : textCell x : 10 x2 : 20 presets : [ topline ] playername : # <= this comes from file 2 type : textCell x : 30 x2 : 40 presets : [ topline ] xp : # <= this comes from file 2 x : 45 y : 45","title":"Template Inheritance"},{"location":"templates/#finding-the-correct-coordinates","text":"Let's be honest from the beginning: Finding the correct coordinates for adding own content is always fiddly and a lot of try-and-error. However, there are a few ways to make life easier here. There are currently three options for the pfscf fill command to support finding the correct coordinates: --cellBorder (short: -c ) --exampleValues (short: -e ) --grid (short: -g ) The grid option is probably the most useful. It will draw a grid over the chronicle PDF file and print the x/y coordinates at the borders of the page. The grid consists of major lines every 5 percent and minor lines every percent. This should allow to get at least the rough coordinates for whatever you want to add, although normally some fine-tuning is required afterwards. Next is the cellBorder option. When this is selected, pfscf will draw borders around the cells that it is printing on the page. This allows to see the exact boundaries and locations of what you provided via coordinates. At the moment, this is only done for content that is actually printed to the page. So if you have some new content, but do not print it on the page, there won't be any borders displayed as well. And finally the exampleValues option. If you select this, normal input values like, e.g. player=Bob will be ignored. Instead, every content that has an example value provided will be printed to the chronicle using exactly this value. So from experience I would suggest to start with the grid option, get rough initial coordinates, and then switch to using both the cellBorder option and the exampleValues option to fine-tune everything.","title":"Finding the Correct Coordinates"},{"location":"templates/#other-formatting-options","text":"","title":"Other Formatting Options"},{"location":"templates/#text-alignment","text":"Some content types, e.g. textCell , allow to choose an alignment. This normally consists of a horizontal and a vertical alignment. For example, selecting an alignment of RT for a textCell would indicate that the text should be aligned in the top right corner of the cell. The possible values for horizontal and vertical alignment can be found below. If you choose more than one horizontal or vertical alignment, no error will be thrown yet, but only one of the chosen alignments will be used. The order of the alignment values does not matter, e.g. both RT and TR will have the same result.","title":"Text Alignment"},{"location":"templates/#horizontal-alignment","text":"L : Left-bound C : Centered R : Right-bound","title":"Horizontal Alignment"},{"location":"templates/#vertical-alignment","text":"T : Top M : Middle B : Bottom A : Baseline","title":"Vertical Alignment"},{"location":"templates/#fonts","text":"The list of fonts that can currently be used is as follows: Arial Courier Helvetica Times Symbol ZapfDingbats Support for other fonts will probably never come. What might come later is support for formatting options like bold, italics, underscores.","title":"Fonts"},{"location":"troubleshooting/","text":"Troubleshooting This chapter describes on how to overcome some reoccurring problems users might have. The list will be expanded in the future. All values on my chronicle are misplaced This can happen if your input chronicle PDF file has slightly different dimensions than expected. There is only so much that can be done for automatically correcting this on side of pfscf . To fix this, I would propose to first have a look at section Getting Blank Chronicle Sheets and follow the steps described there to see if that helps. If this does not help, lets see if the following does: First, execute the following command: $ pfscf fill <your_scenario_id> <your_blank_chronicle.pdf> output.pdf -d -e Now you should have file output.pdf with some example value and some green boxes. There is one large box in the middle that covers nearly all of the content. In the lower right corner of this green box it says main in green letters. If everything would be correct, then it would be overlaying the edges of what I call the \"main content area\". If this is off for your chronicle, then you have to correct this for your runs. You can do this by adding an additional parameter -offset-x <value> (or short: -x <value> to your call. If the green box is larger than the main area, use positive values, e.g. -x 10 . If the green box is smaller than the main area, try negative values, e.g. -x -10 . Might take some trying around until you got a working value, but finally it should hopefully work. Then you can use that same value when filling out your chronicle. This parameter is supported both for the fill and for the batch fill command. Only values in the right sidebar (xp, credits/gold, ...) are misplaced Chronicles for different scenarios might have sidebars with a different size and thus need some minor adaptions to the template configuration. First check whether there already exists a specialized template for your scenario ( pfscf template list ) and try using that one. If this does not help, you could either try to fix the configuration yourself or send me the chronicle via email and I will see what I can do. The CSV file that I generated with pfscf does not properly work with Excel/LibreOffice, ... Applications like Excel try to put the content from such a file into a table based on so-called separator characters. And although CSV stands for \" comma -separated values\", the separator character is not necessarily a comma. Apparently Excel has certain expectations on what the separator character is, based on the region that you're living in. At the moment the CSV files generated from pfscf are using ; as separator character per default. When generating a CSV file with pfscf, you can select what should be used as separator using the --separator command line flag, e.g. pfscf batch create --separator \",\" ... . Please check whether everything works then as expected. Soon I will also provide means to store this in a config so that you don't have to specify this each and every time when generating a CSV file. When I use pfscf with some PDF file, it keeps complaining that some operation is not allowed because of PDF permissions on that file. The permission settings in place on Paizos PDFs do not allow to do things like extracting pages. Which I can totally understand for the scenario and their property in general, but this makes life a little bit harder. Have a look at the chapter about getting blank chronicle sheets for instructions on how to extract a chronicle sheet from your scenario PDF file that should work with pfscf. Oh noes! I have found a bug! I HAVE FOUND A BUG!!1! First, calm down. Second, please report this to me by opening an issue . If you do so, please provide as many details as possible. What operating system are you running? What did you do (exact command line, input files), what did then happen (exact output)? I will try to find out what can be done about this and try to fix it as soon as possible.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"This chapter describes on how to overcome some reoccurring problems users might have. The list will be expanded in the future. All values on my chronicle are misplaced This can happen if your input chronicle PDF file has slightly different dimensions than expected. There is only so much that can be done for automatically correcting this on side of pfscf . To fix this, I would propose to first have a look at section Getting Blank Chronicle Sheets and follow the steps described there to see if that helps. If this does not help, lets see if the following does: First, execute the following command: $ pfscf fill <your_scenario_id> <your_blank_chronicle.pdf> output.pdf -d -e Now you should have file output.pdf with some example value and some green boxes. There is one large box in the middle that covers nearly all of the content. In the lower right corner of this green box it says main in green letters. If everything would be correct, then it would be overlaying the edges of what I call the \"main content area\". If this is off for your chronicle, then you have to correct this for your runs. You can do this by adding an additional parameter -offset-x <value> (or short: -x <value> to your call. If the green box is larger than the main area, use positive values, e.g. -x 10 . If the green box is smaller than the main area, try negative values, e.g. -x -10 . Might take some trying around until you got a working value, but finally it should hopefully work. Then you can use that same value when filling out your chronicle. This parameter is supported both for the fill and for the batch fill command. Only values in the right sidebar (xp, credits/gold, ...) are misplaced Chronicles for different scenarios might have sidebars with a different size and thus need some minor adaptions to the template configuration. First check whether there already exists a specialized template for your scenario ( pfscf template list ) and try using that one. If this does not help, you could either try to fix the configuration yourself or send me the chronicle via email and I will see what I can do. The CSV file that I generated with pfscf does not properly work with Excel/LibreOffice, ... Applications like Excel try to put the content from such a file into a table based on so-called separator characters. And although CSV stands for \" comma -separated values\", the separator character is not necessarily a comma. Apparently Excel has certain expectations on what the separator character is, based on the region that you're living in. At the moment the CSV files generated from pfscf are using ; as separator character per default. When generating a CSV file with pfscf, you can select what should be used as separator using the --separator command line flag, e.g. pfscf batch create --separator \",\" ... . Please check whether everything works then as expected. Soon I will also provide means to store this in a config so that you don't have to specify this each and every time when generating a CSV file. When I use pfscf with some PDF file, it keeps complaining that some operation is not allowed because of PDF permissions on that file. The permission settings in place on Paizos PDFs do not allow to do things like extracting pages. Which I can totally understand for the scenario and their property in general, but this makes life a little bit harder. Have a look at the chapter about getting blank chronicle sheets for instructions on how to extract a chronicle sheet from your scenario PDF file that should work with pfscf. Oh noes! I have found a bug! I HAVE FOUND A BUG!!1! First, calm down. Second, please report this to me by opening an issue . If you do so, please provide as many details as possible. What operating system are you running? What did you do (exact command line, input files), what did then happen (exact output)? I will try to find out what can be done about this and try to fix it as soon as possible.","title":"Troubleshooting"},{"location":"usage/","text":"Filling Out Chronicles Quickstart There is a quickstart chapter available if you want to dive right in and get some quick results. Filling Out a Single Chronicle To fill out a chronicle, you will basically need to things to start: The ID of the template to use for filling the chronicle. Details can be found in this section , but when in doubt or you just want to get this going, simply use the following: pfs2 for Pathfinder 2 sfs for Starfinder Pathfinder 1 is not yet supported An empty chronicle to be filled. This should be in PDF format and consist of only a single page. For information on how to create such a file if you have purchased and downloaded a scenario PDF file from Paizo, read the section on how to extract a chronicle PDF . Everything set so far? Good! Then we can get serious now... To fill out a chronicle, you have to call pfscf with the fill command. The call in general looks as follows: pfscf fill <template> <infile> <outfile> [<param_id>=<value> ...] And here is an example on how an actual call could look like: pfscf fill pfs2 s103_blank.pdf s103_bob player=Bob char=\"The Bobbynator\" societyid=123456-2001 xp=4 Worked so far? Great, you've created your first filled chronicle using pfscf ! But if something did not go as expected, weird error messages coming up or the resulting PDF looks somehow wrong, then please have a look at section Troubleshooting . Now you probably want to add some more stuff than just the things shown in the example above. To get the complete list of supported values for a specific chronicle, please call pfscf template describe <template> . This will display a list of all the supported parameters that you can use to fill out your chronicle. If you use a specialized chronicle template, e.g. template pfs2.s1-06 from above, instead of the more generic templates like pfs2 , you might get additional options, e.g. for striking out specific boons or other scenario-specific content. Filling Out Multiple Chronicles To fill out multiple chronicles in one go, e.g. to create all chronicles for a single game session, a batch mode is included. Using this mode is (I hope) rather easy and consists of two steps that are described below. Create a CSV File Out of a Chronicle Template First you have to create a CSV file (CSV: Comma-separated values) for the chronicle template that you want to use. If you do not yet know which chronicle template to use, have a look at this section . CSV was selected here because then you can then easily use other programs like Excel or LibreOffice Calc to open this file and modify it. If you have one of the listed programs, chances are good that all you have to do is double-click on the CSV file and the correct program will open up automatically. Of course it is also possible to modify the CSV file with any texteditor of your choice. You can create a CSV file for a specific scenario with the pfscf batch create <template> <outputFile> command. $ pfscf batch create pfs2.s1-06 mySession.csv The resulting CSV file will contain entries for all parameters supported by the selected chronicle template, like player name, society id and scenario-specific boons if they are already supported. It includes columns for up to 7 players, but you can easily add or remove columns here. If you want to have some parameters already prefilled, you can provide additional arguments during CSV creation: $ pfscf batch create pfs2.s1-06 mySession.csv event=\"PaizoCon\" date=2020-09-12\" gm=\"J. Doe\" gmid=\"123456\" Creating Filled Chronicles From a CSV File So now you have already created a CSV file that contains information about your players, and now want to use that to fill out chronicles, one for each player? Great, thats what I'm talking about! For this there is the pfscf batch fill command, or short pfscf b f . The complete command with arguments is pfscf batch fill <template> <csv_file> <input_pdf> <output_dir> [<param_id>=<value> ...] . An example call looks as follows: $ pfscf batch fill pfs2.s1-06 mySession.csv s106_blank.pdf outputDir Creating file outputDir\\Chronicle_Player_1.pdf Creating file outputDir\\Chronicle_Player_2.pdf Creating file outputDir\\Chronicle_Player_3.pdf Creating file outputDir\\Chronicle_Player_4.pdf Creating file outputDir\\Chronicle_Player_5.pdf Creating file outputDir\\Chronicle_Player_6.pdf Creating file outputDir\\Chronicle_Player_7.pdf This would then create one file per player in the specified output directory. In the example, you would have files outputDir/Chronicle_Player_1.pdf to outputDir/Chronicle_Player_7.pdf . Chronicles will only be generated if at least one value is set in the CSV file for that player. Finding the Right Chronicle Template To find the right template for your chronicle, you can basically do two things: Display the complete list of supported templates, or use the builtin search function to search for a specific template Display list of templates To display the complete list of supported templates, execute command pfscf template list (or short: pfscf t l ) $ pfscf template list List of available templates: - pfs2: Pathfinder 2 Society Chronicle - pfs2.quests: PFS2 Quests - pfs2.q01: Quest #01: The Sandstone Secret [...] - pfs2.s1: PFS2 Season 1: Year of the Open Road - pfs2.s1-00: #1-00: Origin of the Open Road - pfs2.s1-01: #1-01: The Absalom Initiation [...] - pfs2.specials: Specials - pfs2.littleTrouble: Little Trouble in Big Absalom - sfs: Starfinder Society Chronicle Search for template To search for a specific template, you can use the command pfscf template search <search terms> (or short: pfscf t s <search terms> ). This will display all chronicle templates where all of the terms appear in the template description and template id. The search is case-insensitive. $ pfscf template search star pfs2 Matching Templates: - pfs2.s1-09: #1-09: Star-Crossed Voyages - pfs2.s1-24: #1-24: Lightning Strikes, Stars Fall - pfs2.s1-23: #1-23: The Star-Crossed Court","title":"Filling Out Chronicles"},{"location":"usage/#filling-out-chronicles","text":"","title":"Filling Out Chronicles"},{"location":"usage/#quickstart","text":"There is a quickstart chapter available if you want to dive right in and get some quick results.","title":"Quickstart"},{"location":"usage/#filling-out-a-single-chronicle","text":"To fill out a chronicle, you will basically need to things to start: The ID of the template to use for filling the chronicle. Details can be found in this section , but when in doubt or you just want to get this going, simply use the following: pfs2 for Pathfinder 2 sfs for Starfinder Pathfinder 1 is not yet supported An empty chronicle to be filled. This should be in PDF format and consist of only a single page. For information on how to create such a file if you have purchased and downloaded a scenario PDF file from Paizo, read the section on how to extract a chronicle PDF . Everything set so far? Good! Then we can get serious now... To fill out a chronicle, you have to call pfscf with the fill command. The call in general looks as follows: pfscf fill <template> <infile> <outfile> [<param_id>=<value> ...] And here is an example on how an actual call could look like: pfscf fill pfs2 s103_blank.pdf s103_bob player=Bob char=\"The Bobbynator\" societyid=123456-2001 xp=4 Worked so far? Great, you've created your first filled chronicle using pfscf ! But if something did not go as expected, weird error messages coming up or the resulting PDF looks somehow wrong, then please have a look at section Troubleshooting . Now you probably want to add some more stuff than just the things shown in the example above. To get the complete list of supported values for a specific chronicle, please call pfscf template describe <template> . This will display a list of all the supported parameters that you can use to fill out your chronicle. If you use a specialized chronicle template, e.g. template pfs2.s1-06 from above, instead of the more generic templates like pfs2 , you might get additional options, e.g. for striking out specific boons or other scenario-specific content.","title":"Filling Out a Single Chronicle"},{"location":"usage/#filling-out-multiple-chronicles","text":"To fill out multiple chronicles in one go, e.g. to create all chronicles for a single game session, a batch mode is included. Using this mode is (I hope) rather easy and consists of two steps that are described below.","title":"Filling Out Multiple Chronicles"},{"location":"usage/#create-a-csv-file-out-of-a-chronicle-template","text":"First you have to create a CSV file (CSV: Comma-separated values) for the chronicle template that you want to use. If you do not yet know which chronicle template to use, have a look at this section . CSV was selected here because then you can then easily use other programs like Excel or LibreOffice Calc to open this file and modify it. If you have one of the listed programs, chances are good that all you have to do is double-click on the CSV file and the correct program will open up automatically. Of course it is also possible to modify the CSV file with any texteditor of your choice. You can create a CSV file for a specific scenario with the pfscf batch create <template> <outputFile> command. $ pfscf batch create pfs2.s1-06 mySession.csv The resulting CSV file will contain entries for all parameters supported by the selected chronicle template, like player name, society id and scenario-specific boons if they are already supported. It includes columns for up to 7 players, but you can easily add or remove columns here. If you want to have some parameters already prefilled, you can provide additional arguments during CSV creation: $ pfscf batch create pfs2.s1-06 mySession.csv event=\"PaizoCon\" date=2020-09-12\" gm=\"J. Doe\" gmid=\"123456\"","title":"Create a CSV File Out of a Chronicle Template"},{"location":"usage/#creating-filled-chronicles-from-a-csv-file","text":"So now you have already created a CSV file that contains information about your players, and now want to use that to fill out chronicles, one for each player? Great, thats what I'm talking about! For this there is the pfscf batch fill command, or short pfscf b f . The complete command with arguments is pfscf batch fill <template> <csv_file> <input_pdf> <output_dir> [<param_id>=<value> ...] . An example call looks as follows: $ pfscf batch fill pfs2.s1-06 mySession.csv s106_blank.pdf outputDir Creating file outputDir\\Chronicle_Player_1.pdf Creating file outputDir\\Chronicle_Player_2.pdf Creating file outputDir\\Chronicle_Player_3.pdf Creating file outputDir\\Chronicle_Player_4.pdf Creating file outputDir\\Chronicle_Player_5.pdf Creating file outputDir\\Chronicle_Player_6.pdf Creating file outputDir\\Chronicle_Player_7.pdf This would then create one file per player in the specified output directory. In the example, you would have files outputDir/Chronicle_Player_1.pdf to outputDir/Chronicle_Player_7.pdf . Chronicles will only be generated if at least one value is set in the CSV file for that player.","title":"Creating Filled Chronicles From a CSV File"},{"location":"usage/#finding-the-right-chronicle-template","text":"To find the right template for your chronicle, you can basically do two things: Display the complete list of supported templates, or use the builtin search function to search for a specific template","title":"Finding the Right Chronicle Template"},{"location":"usage/#display-list-of-templates","text":"To display the complete list of supported templates, execute command pfscf template list (or short: pfscf t l ) $ pfscf template list List of available templates: - pfs2: Pathfinder 2 Society Chronicle - pfs2.quests: PFS2 Quests - pfs2.q01: Quest #01: The Sandstone Secret [...] - pfs2.s1: PFS2 Season 1: Year of the Open Road - pfs2.s1-00: #1-00: Origin of the Open Road - pfs2.s1-01: #1-01: The Absalom Initiation [...] - pfs2.specials: Specials - pfs2.littleTrouble: Little Trouble in Big Absalom - sfs: Starfinder Society Chronicle","title":"Display list of templates"},{"location":"usage/#search-for-template","text":"To search for a specific template, you can use the command pfscf template search <search terms> (or short: pfscf t s <search terms> ). This will display all chronicle templates where all of the terms appear in the template description and template id. The search is case-insensitive. $ pfscf template search star pfs2 Matching Templates: - pfs2.s1-09: #1-09: Star-Crossed Voyages - pfs2.s1-24: #1-24: Lightning Strikes, Stars Fall - pfs2.s1-23: #1-23: The Star-Crossed Court","title":"Search for template"}]}